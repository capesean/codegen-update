import { Component, OnInit, forwardRef, ViewChild, Input, EventEmitter, Output } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { NAMEModalComponent } from './NAME_TOLOWER.modal.component';
import { NAME } from '../common/models/NAME_TOLOWER.model';
import { Enum } from '../common/models/enums.model';
/*IMPORTS*/
@Component({
    selector: 'HYPHENATEDNAME-select',
    templateUrl: './NAME_TOLOWER.select.component.html',
    providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NAMESelectComponent),
        multi: true
    }],
    host: { 'class': 'app-select' }
})
export class NAMESelectComponent implements OnInit, ControlValueAccessor {

    @Input() KEYFIELD: string | string[];
    @Input() CAMELCASENAME: NAME | NAME[];
    @Output() CAMELCASENAMEChange = new EventEmitter<NAME | NAME[]>();
    @Input() canRemoveFilters = false;
    @Input() multiple = false;
    @Input() showAddNew = false;
/*INPUTS*/
    disabled = false;
    placeholder = this.multiple ? "Select PLURALFRIENDLYNAME_TOLOWER" : "Select aSTARTSWITHVOWEL FRIENDLYNAME_LOWER";

    @ViewChild('modal', { static: false }) modal: NAMEModalComponent;

    constructor(
    ) {
    }

    ngOnInit(): void {
    }

    propagateChange = (_) => { };

    writeValue(KEYFIELD: string | string[]): void {
        if (KEYFIELD !== undefined) {
            this.KEYFIELD = KEYFIELD;
            this.propagateChange(this.KEYFIELD);
        }
    }

    registerOnChange(fn): void {
        this.propagateChange = fn;
    }

    registerOnTouched(): void {
    }

    setDisabledState?(isDisabled: boolean): void {
        this.disabled = isDisabled;
    }

    changed(CAMELCASENAME: NAME | NAME[]) {
        if (this.disabled) return;
        this.CAMELCASENAME = CAMELCASENAME;
        this.CAMELCASENAMEChange.emit(CAMELCASENAME);
        if (this.multiple)
            this.writeValue(CAMELCASENAME ? (CAMELCASENAME as NAME[]).map(o => o.KEYFIELD) : null);
        else
            this.writeValue(CAMELCASENAME ? (CAMELCASENAME as NAME).KEYFIELD : null);
    }

    getLabel() {
        if (this.multiple) {
            let label = "";
            (this.CAMELCASENAME as NAME[]).forEach(CAMELCASENAME => label += (label === "" ? "" : ", ") + LABEL_OUTPUT_MULTI);
            return label;
        }
        return this.CAMELCASENAME ? LABEL_OUTPUT_SINGLE : "";
    }

    openModal() {
        if (this.disabled) return;
        this.modal.open();
    }
}